"""
Statement

Given an array of strings, group anagrams together.

Example:

Input: ["eat", "tea", "tan", "ate", "nat", "bat"],
Output:
[
  ["ate","eat","tea"],
  ["nat","tan"],
  ["bat"]
]

Note:
- All inputs will be in lowercase.
- The order of your output does not matter.
----------
Understand / Plan

- We can find which strings are anagrams by sorting the strings and comparing
- This can be done implicitly by using a map of sorted strings lists of words in the
input they match to
- The solution can be generated by returning every list in the map
- If the inputs were mixed case and the anagrams were supposed to be case insensitive,
we could convert each word to lowercase before hashing
"""


class Solution(object):
    def groupAnagrams(self, strs):
        """
        :type strs: List[str]
        :rtype: List[List[str]]
        """
        buckets = {}
        for string in strs:
            anagram = ''.join(sorted(string))
            try:
                buckets[anagram].append(string)
            except KeyError:
                buckets[anagram] = [string]
        return [buckets[key] for key in buckets.keys()]


if __name__ == '__main__':
    s = Solution()
    words = ["eat", "tea", "tan", "ate", "nat", "bat"]
    print(s.groupAnagrams(words))
